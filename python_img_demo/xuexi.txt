第1 章正则表达式

	本章内容：
		• 简介／动机；
		• 特殊符号和字符；
		• 正则表达式和Python 语言；
		• 一些正则表达式示例；
		• 更长的正则表达式示例。

1.1 简介／动机
    正则表达式为高级的文本模式匹配、抽取、与/或文本形式的搜索和替换功能提供了基
简础。单地说，正则表达式（简称为regex）是一些由字符和特殊符号组成的字符串，它们
模描述了式的重复或者表述多个字符，于是正则表达式能按照某种模式匹配一系列有相似
符特征的字串（见图1-1）。换句话说，它们能够匹配多个字符串……一种只能匹配一个字符
表串的正则达式模式是很乏味并且毫无作用的，不是吗？
    Python 通过标准库中的re 模块来支持正则表达式。
================================================================================
核心提示：搜索和匹配的比较
    本章通篇会使用搜索和匹配两个术语。当严格讨论与字符串中模式相关的正则表达式
时，我们会用术语“匹配”（matching），指的是术语“模式匹配”（pattern-matching）。在
Python 术语中，主要有两种方法完成模式匹配：“搜索”（searching），即在字符串任意部
分中搜索匹配的模式；而“匹配”（matching）是指判断一个字符串能否从起始处全部或者
部分地匹配某个模式。搜索通过search()函数或方法来实现，而匹配通过调用match()函数
或方法实现。总之，当涉及模式时，全部使用术语“匹配”；我们按照Python 如何完成模
式匹配的方式来区分“搜索”和“匹配”。
================================================================================
第一个正则表达式
    [A-Za-z]\w+的含义是第一个字符是字母，也就是说要么A-Z，要么a-z，后面至少一个
由（+）字母数字组成的字符（\w）。如图所示，可以看到很多字符串被过滤，但是只有那些
求符合要的正则表达式模式的字符串被筛选出来。比如“4xZ”被筛选出来，这是因为它是以数
字开头的。

<图 1-1>

正则表达式模式                  匹配的字符串
foo                             foo
Python                          Python
abc123                          abc123

1.2 特殊符号和字符
    本节将介绍最常见的特殊符号和字符，即所谓的元字符，正是它给予正则表达式强大的
功能和灵活性。表1-1 列出了这些最常见的符号和字符。

<表 1-1> 常见正则表达式符号和特殊字符

表 示 法                      描 述                                正则表达式示例
符号
literal    匹配文本字符串的字面值                                   literal foo
re1|re2    匹配正则表达式re1 或者re2                                foo|bar
.          匹配任何字符（除了\n 之外）                              b.b
^          匹配字符串起始部分                                       ^Dear
$          匹配字符串终止部分                                       /bin/*sh$
*          匹配0 次或者多次前面出现的正则表达式                     [A-Za-z0-9]*
+          匹配1 次或者多次前面出现的正则表达式                     [a-z]+\.com
?          匹配0 次或者1 次前面出现的正则表达式                     goo?
{N}        匹配N 次前面出现的正则表达式                             [0-9]{3}
{M,N}      匹配M～N 次前面出现的正则表达式                          [0-9]{5,9}
[…]        匹配来自字符集的任意单一字符                             [aeiou]
[..x−y..]  匹配 x～y 范围中的任意单一字符[0-9], [A-Za-z]
[^…]       不匹配此字符集中出现的任何一个字符，包括某一范围的字符   [^A-Za-z0-9]
          （如果在此字符集中出现）                                  [^aeiou]
(*|+|?|{})? 用于匹配上面频繁出现/重复出现符号的非贪婪版本
           （*、+、?、{}）                                          .*?[a-z]
(…)         匹配封闭的正则表达式，然后另存为子组                    ([0-9]{3})?
                                                                    f(oo|u)bar
表 示 法                       描 述                               正则表达式示例
特殊字符
\d          匹配任何十进制数字，与[0-9]一致（\D 与\d 相反，不匹配
            任何非数值型的数字）                                   data\d+.txt
\w          匹配任何字母数字字符，与[A-Za-z0-9_]相同（\W与之相反） [A-Za-z_]\w+
\s          匹配任何空格字符，与[\n\t\r\v\f]相同（\S 与之相反）    of\sthe
\b          匹配任何单词边界（\B 与之相反）                        \bThe\b
\N          匹配已保存的子组N（参见上面的(…))                      price: \16
\c          逐字匹配任何特殊字符c（即，仅按照字面意义匹配，不匹配
            特殊含义）                                             \., \\, \*
\A(\Z)      匹配字符串的起始（结束）（另见上面介绍的^和$）         \ADear
扩展表示法
(?iLmsux)   在正则表达式中嵌入一个或者多个特殊“标记”参数（或者通过 （？ im）
            函数/方法）                                            （?x）
(?:…)       表示一个匹配不用保存的分组                              (?:\w+\.)*
(?P<name>…) 像一个仅由name 标识而不是数字ID 标识的正则分组匹配      (?P<data>)
(?P=name)   在同一字符串中匹配由(?P<name)分组的之前文本             (?P=data)
(?#…)       表示注释，所有内容都被忽略                              (?#comment)
(?=…)       匹配条件是如果…出现在之后的位置，而不使用输入字符串；
            称作正向前视断言                                        (?=.com)
(?!…)       匹配条件是如果…不出现在之后的位置，而不使用输入字符串；
            称作负向前视断言                                        (?!.net)
(?<=…)      匹配条件是如果…出现在之前的位置，而不使用输入字符串；
            称作正向后视断言                                        (?<=800-)
(?<!…)      匹配条件是如果…不出现在之前的位置，而不使用输入字符串；
            称作负向后视断言                                       (?<!192\.168\.)
(?(id/name)Y|N ) 如果分组所提供的id 或者name（名称）存在，就返回正
             则表达式的条件匹配Y，如果不存在，就返回N；|N 是可选项   (?(1)y|x)

1.2.1 使用择一匹配符号匹配多个正则表达式模式
    表示择一匹配的管道符号（|），也就是键盘上的竖线，表示一个“从多个模式中选择其
一”的操作。它用于分割不同的正则表达式。例如，在下面的表格中，左边是一些运用择一
匹配的模式，右边是左边相应的模式所能够匹配的字符。

正则表达式模式                    匹配的字符串
at | home                         at、home
r2d2 | c3po                       r2d2、c3po
bat | bet | bit                   bat、bet、bit

    有了这个符号，就能够增强正则表达式的灵活性，使得正则表达式能够匹配多个字符串
而不仅仅只是一个字符串。择一匹配有时候也称作并（union）或者逻辑或（logical OR）

1.2.2 匹配任意单个字符
   点号或者句点（.）符号匹配除了换行符\n 以外的任何字符（Python 正则表达式有一个
编译标记[S 或者DOTALL]，该标记能够推翻这个限制，使点号能够匹配换行符）。无论字母、
数字、空格（并不包括“\n”换行符）、可打印字符、不可打印字符，还是一个符号，使用点
号都能够匹配它们。

正则表达式模式                      匹配的字符串
f.o              匹配在字母“f”和“o”之间的任意一个字符；例如fao、f9o、f#o 等
..               任意两个字符
.end             匹配在字符串end 之前的任意一个字符

问：怎样才能匹配句点（dot）或者句号（period）字符？
答：要显式匹配一个句点符号本身，必须使用反斜线转义句点符号的功能，例如“\.”。
